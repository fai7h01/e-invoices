package com.accounting.einvoices.controller;

import com.accounting.einvoices.dto.InvoiceDTO;
import com.accounting.einvoices.dto.response.wrapper.ResponseWrapper;
import com.accounting.einvoices.service.EmailService;
import com.accounting.einvoices.service.InvoiceProductService;
import com.accounting.einvoices.service.InvoiceService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@Slf4j
@RestController
@RequestMapping("/api/v1/assistant")
public class AssistantController {

    private final InvoiceService invoiceService;
    private final EmailService emailService;
    private final InvoiceProductService invoiceProductService;

    public AssistantController(InvoiceService invoiceService, EmailService emailService, InvoiceProductService invoiceProductService) {
        this.invoiceService = invoiceService;
        this.emailService = emailService;
        this.invoiceProductService = invoiceProductService;
    }


    @GetMapping("/invoice/list/{companyTitle}")
    public ResponseEntity<ResponseWrapper> getInvoicesByLoggedInCompany(@PathVariable("companyTitle") String company) {
        List<InvoiceDTO> invoices = invoiceService.findAllByCompanyTitle(company);
        return ResponseEntity.status(HttpStatus.OK).body(ResponseWrapper.builder()
                .code(HttpStatus.OK.value())
                .success(true)
                .message("Invoice list is successfully retrieved.")
                .data(invoices).build());
    }

    @PostMapping("/invoice/approve/{invNo}/{companyTitle}")
    public ResponseEntity<ResponseWrapper> approveInvoiceByInvNoAndCompanyTitle(@PathVariable("invNo") String invNo,
                                                                                @PathVariable("companyTitle") String company) {
        InvoiceDTO invoice = invoiceService.approve(invNo, company);
        return ResponseEntity.status(HttpStatus.ACCEPTED).body(ResponseWrapper.builder()
                .code(HttpStatus.ACCEPTED.value())
                .success(true)
                .message("Invoice is successfully approved.")
                .data(invoice)
                .build());
    }

    //send invoice pdf via mail to client
    @GetMapping("/invoice/send/{invNo}/{companyTitle}")
    public ResponseEntity<ResponseWrapper> sendInvoicePdfViaMailToClient(@PathVariable("invNo") String invNo,
                                                                         @PathVariable("companyTitle") String company) {

        InvoiceDTO invoice = invoiceService.findByInvNoAndCompanyTitle(invNo, company);

        try {
            Map<String, Object> model = new HashMap<>();
            model.put("invoice", invoice);
            model.put("company", invoice.getCompany());
            model.put("invoiceProducts", invoiceProductService.findAllByInvoiceIdAndCalculateTotalPrice(invoice.getId()));

            CompletableFuture<byte[]> completableFuture = emailService.generatePdfFromHtmlTemplate("invoicePdf", model);

            try {
               emailService.sendEmailWithAttachment(invoice.getClientVendor().getEmail(),
                        "Invoice for " + invoice.getClientVendor().getName(),
                        "This invoice has been generated by " + invoice.getCompany().getTitle(), completableFuture.get());
            } catch (Exception e) {
                log.error("Error occurred while sending email: {}", e.getMessage());
            }
        } catch (IOException e) {
            log.error("Error occurred while generating pdf: {}", e.getMessage());
        }
        return ResponseEntity.status(HttpStatus.ACCEPTED).body(ResponseWrapper.builder()
                .code(HttpStatus.ACCEPTED.value())
                .success(true)
                .message("Invoice is successfully sent to client!")
                .build());
    }


}
