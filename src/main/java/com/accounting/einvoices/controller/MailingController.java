package com.accounting.einvoices.controller;

import com.accounting.einvoices.dto.InvoiceDTO;
import com.accounting.einvoices.dto.response.ResponseWrapper;
import com.accounting.einvoices.service.CompanyService;
import com.accounting.einvoices.service.EmailService;
import com.accounting.einvoices.service.InvoiceProductService;
import com.accounting.einvoices.service.InvoiceService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.mail.MessagingException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

@Slf4j
@CrossOrigin(origins = "http://localhost:5173")
@RestController
@RequestMapping("/api/v1/mailing")
public class MailingController {

    private final EmailService emailService;
    private final InvoiceService invoiceService;
    private final InvoiceProductService invoiceProductService;
    private final CompanyService companyService;

    public MailingController(EmailService emailService, InvoiceService invoiceService, InvoiceProductService invoiceProductService, CompanyService companyService) {
        this.emailService = emailService;
        this.invoiceService = invoiceService;
        this.invoiceProductService = invoiceProductService;
        this.companyService = companyService;
    }

    @GetMapping("/send-email/{invoiceId}")
    public ResponseEntity<Void> sendEmail(@PathVariable("invoiceId") Long id) {
        InvoiceDTO invoice = invoiceService.findById(id);
        try {
            Map<String, Object> model = new HashMap<>();
            model.put("invoice", invoice);
            model.put("company", companyService.getByLoggedInUser());
            model.put("invoiceProducts", invoiceProductService.findAllByInvoiceIdAndCalculateTotalPrice(id));

            byte[] pdfBytes = emailService.generatePdfFromHtmlTemplate("invoicePdf", model);

            try {
                CompletableFuture<String> future = emailService.sendEmailWithAttachment(invoice.getClientVendor().getEmail(),
                        "Invoice for " + invoice.getClientVendor().getName(),
                        "This invoice has been generated by " + invoice.getCompany().getTitle(), pdfBytes);

                future.thenAccept(result -> log.info("Async email result: {}", result));
            } catch (Exception e) {
                log.error("Error occurred while sending email: {}", e.getMessage());
            }
        } catch (IOException e) {
            log.error("Error occurred as sending email: {}", e.getMessage());
        }
        return ResponseEntity.noContent().build();
    }
}
